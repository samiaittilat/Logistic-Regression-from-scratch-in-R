% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.R
\name{fit}
\alias{fit}
\title{Fit model to train data}
\usage{
fit(
  formule,
  data,
  mode = "mini_batch",
  batch_size = 32,
  alpha = 0.01,
  max_iter = 500,
  tol = 0.001,
  ncores = NA,
  parallel = FALSE,
  plot = FALSE,
  lambda = 0,
  beta = 1
)
}
\arguments{
\item{formule}{an object of class "formula" (or one that can be coerced to that class):
a symbolic description of the model to be fitted. The details of model specification
are given under ‘Details’}

\item{data}{a dataframe containing the variables in the model.}

\item{mode}{parameter is the way you feed your data to the model
( online, mini-batch or batch). The mode is set to mini-batch by default.}

\item{batch_size}{the batch size when mode is mini-batch}

\item{alpha}{the learning rate in gradient descent}

\item{max_iter}{maximum number of iteration}

\item{tol}{tolerance for accepting a model :}

\item{ncores}{indicates the number of cores to use; if invalid (<= 0 or> number of cores available), the
maximum capacities of the host machine are used}

\item{parallel}{logical.Should we use parallel computing ? specifies whether you want to
perform a parallel or a sequential computing. The default value
is set to False ( meaning it's sequential). Note that parallel
computing is not performed in the case of online gradient descent.}

\item{plot}{logical. Should we plot the cost function while iterating ?}

\item{lambda}{parameter is set to zero by default if no regularization
is applied to the model. You may want to modify this value if your model is overfitting.}

\item{beta}{beta parameter which takes only two values
(beta = 1 by default: ridge regularization case) beta = 0 lasso case}
}
\value{
An object S3 of class Reg.Log
md$coeffs : Coefficients ( model weights)
md$nb_iter: Number of epochs
md$cost: cost function values at each epoch
md$mean_col= mean value of each feature
md$sd: Standard deviation value of each feature
}
\description{
Logistic regression on train data (classication)
}
\details{
Function that trains your model via gradient descent and outputs the model
weights. This function comes with a bunch of parameters.
}
\examples{
\dontrun{
modele = fit_grad(formule = y~., data=nos_data,max_iter = 300, mode='batch', parallel = TRUE )
}
}
\author{
Marie Vachet, Afaf Ben Haj, Sami Ait Tilat
}
